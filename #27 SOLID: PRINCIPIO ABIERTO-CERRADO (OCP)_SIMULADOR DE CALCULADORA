from abc import ABC, abstractmethod

"Ejercicio"

class Form:
    def draw(self):
        pass

class Square(Form):
    def draw(self):
        print("Imprimiendo un cuadrado")

class Circle(Form):
    def draw(self):
        print("Imprimiendo un circulo")

class Triangle(Form):
    def draw(self):
        print("Imprimiendo un triangulo")

shapes = [Square(), Circle(), Triangle()]
for shape in shapes:
    shape.draw()


"Extra"

class Operation(ABC):
    @abstractmethod
    def execute(self, a, b):
        pass

class Addition(Operation):
    def execute(self, a, b):
        return a + b
    
class Substraction(Operation):
    def execute(self, a, b):
        return a - b
    
class Multiplication(Operation):
    def execute(self, a, b):
        return a * b
    
class Division(Operation):
    def execute(self, a, b):
        return a / b
    
class Power(Operation):
    def execute(self, a, b):
        return a ** b
    
class Calculator:
    def __init__(self):
        self.operations = {}

    def add_operation(self, name, operation):
        self.operations[name] = operation

    def calcule(self, name, a, b):
        if name not in self.operations:
            raise ValueError(f"La operacion {name} no esta soportada")
        return self.operations[name].execute(a, b)
    
calculator = Calculator()
calculator.add_operation("addition", Addition())
calculator.add_operation("substraction", Substraction())
calculator.add_operation("multiplication", Multiplication())
calculator.add_operation("division", Division())
calculator.add_operation("power", Power())

print(calculator.calcule("addition", 1, 2))
print(calculator.calcule("substraction", 1, 2))
print(calculator.calcule("multiplication", 1, 2))
print(calculator.calcule("division", 1, 2))
print(calculator.calcule("power", 1, 2))

